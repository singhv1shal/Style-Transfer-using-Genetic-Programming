# -*- coding: utf-8 -*-
"""
@author: Vishal Singh
@email : singhvishal0304@gmail.com
"""

'''
Necessary imports : 
    opencv(cv2) for reading and visualizing images
    pyplot for showing image on console
    PIL (Image) library to support image operation (efficient in resizing without distortion)
    os to handle operating-system specific functionalities
    argparse to handle command line arguments
    numpy to handle image matrices
        GeneticStyleTransfer to import genetic programming module
	sharpenanddenoised: this modeule sharpens the input image by parameterized amount and denoise the image
	adjustingcontrast: this modeule is used for adjusting the contrast of the image    
'''
import cv2
from matplotlib import pyplot as plt
from PIL import Image
import os
import functools
import operator
import numpy as np
import argparse
import GeneticStyleTransfer as ST
import sharpenanddenoised
import adjustingcontrast

#Reading image inputs from command line 
parser= argparse.ArgumentParser()
parser.add_argument("-c","--content_image",help=" specify path of content image")
parser.add_argument("-s","--style_image",help=" specify path of style image")
args=parser.parse_args()


    #reading the content image 
content_img=cv2.imread(args.content_image)    

    #reading the style image which is target for optimizing
style_img=cv2.imread(args.style_image)    
    
    #resize the style image according to size of content_image
style_img=np.asarray(Image.open('fruit.jpg').resize((content_img.shape[1],content_img.shape[0])))    
    
img_shape=content_img.shape    
print(img_shape) 
    #Hyperparameters
n_gene = 6
mutation_percent= 0.01 #kept low to prevent chaos in the system
n_survived = 3

''''
intializing population:
initial population generated by varying components of the content image
'''
initialgene = np.empty(shape=(n_gene, 
                                  functools.reduce(operator.mul, img_shape)),
                                  dtype=np.uint8)
initialgene[0,:]= adjustingcontrast.adjustCONTRAST100(content_img)
initialgene[1,:]= adjustingcontrast.adjustCONTRAST3(content_img)
initialgene[2,:]= sharpenanddenoised.sharpen10(content_img)
initialgene[3,:]= sharpenanddenoised.sharpen3(content_img)
initialgene[4,:]= sharpenanddenoised.denoised(content_img)
initialgene[5,:]= np.reshape(a=content_img,newshape=(functools.reduce(operator.mul, content_img.shape)))

'''
Evolving the population based on the gram matrix
'''   
num_iterations = 15001
#no. of iteration after which image is saved
show_iteration=1000
current_genes=initialgene
for i in range(num_iterations):
	print('iteration number : ',i)
	#The population survived and that can serve as parents
	
	survived = ST.survival_of_the_fittest(n_survived,current_genes,img_shape,style_img)
	#Generating new population with breeding - offsprings and survived genes make the updated current_genes
	current_genes= ST.breed(survived,n_gene,img_shape)
	#Mutation enables offsprings to deviate from the characteristics of parents
	current_genes = ST.mutation(current_genes,n_survived, mut_percent=mutation_percent)
	
	fitness= np.zeros(current_genes.shape[0])
	
	for it in range(current_genes.shape[0]):
		fitness[it]=ST.fitness_score(current_genes[it,:],style_img,img_shape)
	if(np.mod(i, show_iteration)==0 and i!=0):
		
		
		fittest_gene = current_genes[np.where(fitness == 
                                                         np.min(fitness))[0][0], :]
	        # Decoding the selected chromosome to return it back as an image.
		fittest_img = np.reshape(a=fittest_gene, newshape=img_shape)
		plt.imshow(fittest_img)
		plt.show()
		save_dir=os.curdir+'//'
		plt.imsave(save_dir+'out_'+str(i)+'.png', fittest_img)
		# 
	              
	        
	
	
	 
	
	    
    
    
    
    
    
    

